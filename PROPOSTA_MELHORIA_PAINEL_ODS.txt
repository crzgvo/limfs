===========================================
üìå PROPOSTA DE EXPANS√ÉO E OTIMIZA√á√ÉO
     PAINEL ODS SERGIPE - LIMFS 
===========================================
Data: 13/04/2025

üîπ SE√á√ÉO 1 - DIAGN√ìSTICO E CONTEXTO
-------------------------------------------

O atual Painel ODS do LIMFS apresenta uma base t√©cnica s√≥lida, com implementa√ß√µes importantes:

1. **Cobertura de ODS:**
   - Implementados: ODS 1 (Pobreza), ODS 4 (Educa√ß√£o), ODS 5 (G√™nero), ODS 8 (Trabalho)
   - Parcialmente implementados: ODS 3 (Sa√∫de), ODS 6 (√Ågua/Saneamento), ODS 7 (Energia), ODS 11 (Cidades)

2. **Arquitetura atual:**
   - Frontend: HTML5, CSS3, JavaScript ES6+ modularizado
   - Bibliotecas: Chart.js para visualiza√ß√£o, Tippy.js para tooltips
   - Estrutura de dados em JSON para indicadores
   - Estrat√©gia de cache local para otimiza√ß√£o de performance
   - Sistema de fallback para dados indispon√≠veis

3. **Pontos fortes identificados:**
   - Boa modulariza√ß√£o do c√≥digo JavaScript
   - Sistema resiliente de busca de dados em camadas
   - Dashboards espec√≠ficos para ODS individuais
   - Preocupa√ß√£o com acessibilidade (ARIA, navega√ß√£o por teclado)

4. **Oportunidades de melhoria:**
   - Escalabilidade limitada para inclus√£o de novos ODS (estrutura semi-r√≠gida)
   - Visualiza√ß√µes geogr√°ficas ausentes (mapas por munic√≠pio)
   - Correla√ß√µes entre ODS n√£o exploradas visualmente
   - Intelig√™ncia de dados ainda limitada (alertas, previs√µes, tend√™ncias)

üîπ SE√á√ÉO 2 - PROPOSTA DE EXPANS√ÉO T√âCNICA
-------------------------------------------

## 2.1 Reestrutura√ß√£o de Dados e Configura√ß√£o

### a) Sistema de Metadados ODS Centralizado

Criar um arquivo JSON centralizado para configura√ß√£o de todos os ODS:

```json
// /dados/ods-config.json
{
  "metadata": {
    "ultima_atualizacao": "2025-04-13",
    "versao": "2.0.0"
  },
  "ods": [
    {
      "id": 1,
      "codigo": "ods1",
      "titulo": "Erradica√ß√£o da Pobreza",
      "descricao": "Acabar com a pobreza em todas as suas formas, em todos os lugares",
      "cor_primaria": "#E5243B",
      "cor_secundaria": "rgba(229, 36, 59, 0.2)",
      "icone": "logo-icons-coloridos-01.png",
      "status": "implementado",
      "indicadores": [
        {
          "id": "pobreza",
          "titulo": "Taxa de Extrema Pobreza",
          "descricao": "Percentual da popula√ß√£o vivendo com menos de R$ 182 por m√™s",
          "unidade": "%",
          "tendencia_desejada": "decrescente",
          "fonte": "IBGE - PNAD Cont√≠nua",
          "metadados": {
            "formula": "Popula√ß√£o abaixo da linha de pobreza / Popula√ß√£o total * 100",
            "periodicidade": "anual",
            "disponibilidade": "2019-2024"
          }
        }
      ]
    },
    // Outros ODS seguem o mesmo padr√£o
  ]
}
```

### b) Estrutura de Dados para Correla√ß√µes entre ODS

```json
// /dados/correlacoes-ods.json
{
  "correlacoes": [
    {
      "ods1": 1,
      "ods2": 4,
      "intensidade": 0.85,
      "descricao": "Forte correla√ß√£o entre educa√ß√£o e redu√ß√£o da pobreza",
      "indicadores_relacionados": ["pobreza", "educacao"]
    },
    {
      "ods1": 6,
      "ods2": 3,
      "intensidade": 0.78,
      "descricao": "Saneamento b√°sico impacta diretamente indicadores de sa√∫de",
      "indicadores_relacionados": ["saneamento", "mortalidade_infantil"]
    }
  ]
}
```

## 2.2 Melhorias no Frontend

### a) Service Worker para Funcionamento Offline

```javascript
// sw.js
const CACHE_NAME = 'limfs-ods-v1';
const urlsToCache = [
  '/',
  '/styles/painel-ods.css',
  '/js/painel-ods.js',
  '/dados/ods-config.json'
];

self.addEventListener('install', event => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => cache.addAll(urlsToCache))
  );
});

self.addEventListener('fetch', event => {
  event.respondWith(
    caches.match(event.request)
      .then(response => response || fetch(event.request))
  );
});
```

### b) Componente de Visualiza√ß√£o Geogr√°fica (Mapa de Calor)

```javascript
// js/components/mapa-geografico.js
class MapaGeografico {
  constructor(containerId, config = {}) {
    this.container = document.getElementById(containerId);
    this.config = {
      colorScale: ['#f7fbff', '#08519c'],
      ...config
    };
    this.map = null;
  }
  
  async init() {
    // Inicializa o mapa com Leaflet ou D3.js
    this.map = L.map(this.container).setView([-10.5741, -37.3857], 8);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(this.map);
    return this;
  }
  
  async carregarDadosMunicipios(dadosIndicador) {
    const geoJson = await fetch('/dados/geo/sergipe-municipios.geojson').then(r => r.json());
    
    L.geoJSON(geoJson, {
      style: feature => {
        const municipio = feature.properties.name;
        const valor = dadosIndicador[municipio] || 0;
        return {
          fillColor: this.getColor(valor),
          weight: 1,
          opacity: 1,
          color: 'white',
          fillOpacity: 0.7
        };
      },
      onEachFeature: (feature, layer) => {
        const municipio = feature.properties.name;
        const valor = dadosIndicador[municipio] || 'N√£o dispon√≠vel';
        layer.bindPopup(`<b>${municipio}</b><br>Valor: ${valor}`);
      }
    }).addTo(this.map);
    
    return this;
  }
  
  getColor(valor) {
    // Algoritmo para determinar cor baseado no valor
  }
}

export default MapaGeografico;
```

### c) Filtros Interativos Avan√ßados

```javascript
// js/components/filtros-avancados.js
class FiltrosAvancados {
  constructor(containerId, opcoesIniciais = {}) {
    this.container = document.getElementById(containerId);
    this.opcoes = {
      periodos: ['2019', '2020', '2021', '2022', '2023', '2024'],
      regioes: ['Norte', 'Sul', 'Leste', 'Oeste', 'Centro'],
      indicadores: [],
      ...opcoesIniciais
    };
    this.callbacks = {};
  }
  
  renderizar() {
    this.container.innerHTML = `
      <div class="filtros-container">
        <div class="filtro-grupo">
          <label for="filtro-periodo">Per√≠odo:</label>
          <select id="filtro-periodo" class="filtro-select">
            ${this.opcoes.periodos.map(p => `<option value="${p}">${p}</option>`).join('')}
          </select>
        </div>
        
        <div class="filtro-grupo">
          <label for="filtro-regiao">Regi√£o:</label>
          <select id="filtro-regiao" class="filtro-select">
            <option value="todas">Todas</option>
            ${this.opcoes.regioes.map(r => `<option value="${r}">${r}</option>`).join('')}
          </select>
        </div>
        
        <button id="btn-aplicar-filtros" class="btn-filtro">Aplicar Filtros</button>
      </div>
    `;
    
    this._adicionarEventListeners();
    return this;
  }
  
  onFiltroAplicado(callback) {
    this.callbacks.filtroAplicado = callback;
    return this;
  }
  
  _adicionarEventListeners() {
    const btnAplicar = this.container.querySelector('#btn-aplicar-filtros');
    btnAplicar.addEventListener('click', () => {
      const filtros = {
        periodo: this.container.querySelector('#filtro-periodo').value,
        regiao: this.container.querySelector('#filtro-regiao').value
      };
      
      if (this.callbacks.filtroAplicado) {
        this.callbacks.filtroAplicado(filtros);
      }
    });
  }
}

export default FiltrosAvancados;
```

## 2.3 Melhorias na Arquitetura de Dados

### a) Classe para Gerenciamento de ODS 

```javascript
// js/services/ods-service.js
class ODSService {
  constructor() {
    this.configCache = null;
    this.indicadoresCache = {};
  }
  
  async getConfig() {
    if (this.configCache) return this.configCache;
    
    try {
      const response = await fetch('/dados/ods-config.json');
      if (!response.ok) throw new Error('Falha ao carregar configura√ß√£o dos ODS');
      
      this.configCache = await response.json();
      return this.configCache;
    } catch (erro) {
      console.error('Erro ao carregar configura√ß√£o ODS:', erro);
      throw erro;
    }
  }
  
  async getODS(odsId) {
    const config = await this.getConfig();
    return config.ods.find(ods => ods.id === Number(odsId) || ods.codigo === odsId);
  }
  
  async getIndicador(odsId, indicadorId) {
    const ods = await this.getODS(odsId);
    if (!ods) throw new Error(`ODS n√£o encontrado: ${odsId}`);
    
    return ods.indicadores.find(ind => ind.id === indicadorId);
  }
  
  async getDadosIndicador(odsId, indicadorId) {
    const cacheKey = `${odsId}-${indicadorId}`;
    
    if (this.indicadoresCache[cacheKey]) {
      return this.indicadoresCache[cacheKey];
    }
    
    try {
      const url = `/dados/indicadores/ods${odsId}_${indicadorId}.json`;
      const response = await fetch(url);
      
      if (!response.ok) {
        throw new Error(`Dados n√£o dispon√≠veis para ${odsId}-${indicadorId}`);
      }
      
      const dados = await response.json();
      this.indicadoresCache[cacheKey] = dados;
      return dados;
    } catch (erro) {
      console.error(`Erro ao carregar dados para ${odsId}-${indicadorId}:`, erro);
      throw erro;
    }
  }
}

export default new ODSService();
```

### b) Sistema de An√°lise de Tend√™ncias

```javascript
// js/utils/analise-tendencias.js
class AnaliseTendencias {
  constructor(dadosHistoricos) {
    this.dados = dadosHistoricos;
  }
  
  calcularTendenciaLinear() {
    const n = this.dados.length;
    if (n < 2) return { inclinacao: 0, tendencia: 'est√°vel' };
    
    // Implementa√ß√£o de regress√£o linear simples
    let sumX = 0, sumY = 0, sumXY = 0, sumXX = 0;
    
    this.dados.forEach((ponto, index) => {
      const x = index; // ou ponto.ano
      const y = ponto.valor;
      
      sumX += x;
      sumY += y;
      sumXY += x * y;
      sumXX += x * x;
    });
    
    const inclinacao = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);
    
    let tendencia = 'est√°vel';
    if (inclinacao > 0.1) tendencia = 'crescente';
    else if (inclinacao < -0.1) tendencia = 'decrescente';
    
    return { inclinacao, tendencia };
  }
  
  projetarValorFuturo(anosAFrente = 1) {
    const tendencia = this.calcularTendenciaLinear();
    const ultimoPonto = this.dados[this.dados.length - 1];
    
    const valorProjetado = ultimoPonto.valor + (tendencia.inclinacao * anosAFrente);
    return {
      ano: ultimoPonto.ano + anosAFrente,
      valor: valorProjetado,
      confianca: this._calcularConfianca(tendencia.inclinacao)
    };
  }
  
  _calcularConfianca(inclinacao) {
    // Algoritmo simplificado para estimar confian√ßa
    const absInclinacao = Math.abs(inclinacao);
    if (absInclinacao < 0.05) return 'baixa';
    if (absInclinacao < 0.2) return 'm√©dia';
    return 'alta';
  }
}

export default AnaliseTendencias;
```

### c) Web Components para Reutiliza√ß√£o na Plataforma

```javascript
// js/components/ods-card.js
class ODSCard extends HTMLElement {
  constructor() {
    super();
    this.attachShadow({ mode: 'open' });
  }
  
  static get observedAttributes() {
    return ['ods-id', 'indicador-id', 'valor', 'titulo', 'tendencia'];
  }
  
  connectedCallback() {
    this.render();
  }
  
  attributeChangedCallback() {
    if (this.shadowRoot) {
      this.render();
    }
  }
  
  render() {
    const odsId = this.getAttribute('ods-id');
    const indicadorId = this.getAttribute('indicador-id');
    const valor = this.getAttribute('valor') || '--';
    const titulo = this.getAttribute('titulo') || 'Indicador ODS';
    const tendencia = this.getAttribute('tendencia') || 'est√°vel';
    
    this.shadowRoot.innerHTML = `
      <style>
        :host {
          display: block;
          font-family: sans-serif;
        }
        .card {
          background-color: white;
          border-radius: 8px;
          box-shadow: 0 2px 10px rgba(0,0,0,0.1);
          padding: 20px;
          position: relative;
          overflow: hidden;
        }
        .badge {
          position: absolute;
          top: 0;
          right: 0;
          background-color: var(--ods-color, #0056b3);
          color: white;
          padding: 6px 12px;
          font-weight: bold;
          border-radius: 0 8px 0 8px;
        }
        .valor {
          font-size: 2.5rem;
          font-weight: bold;
          color: var(--ods-color, #0056b3);
          text-align: center;
          margin: 15px 0;
        }
        .titulo {
          font-size: 1.1rem;
          text-align: center;
        }
        .tendencia {
          text-align: center;
          font-size: 0.9rem;
          margin-top: 10px;
        }
        .tendencia.crescente::before {
          content: "‚Üë ";
          color: green;
        }
        .tendencia.decrescente::before {
          content: "‚Üì ";
          color: red;
        }
      </style>
      
      <div class="card">
        <div class="badge">ODS ${odsId}</div>
        <h3 class="titulo">${titulo}</h3>
        <div class="valor">${valor}</div>
        <div class="tendencia ${tendencia}">
          Tend√™ncia: ${tendencia}
        </div>
        <slot></slot>
      </div>
    `;
  }
}

customElements.define('ods-card', ODSCard);
```

üîπ SE√á√ÉO 3 - EXPANS√ÉO E ALINHAMENTO ESTRAT√âGICO
-------------------------------------------

## 3.1 Prioriza√ß√£o dos ODS para Expans√£o

Sugerimos a seguinte ordem de implementa√ß√£o para os ODS restantes:

1. **Fase 1 (Pr√≥ximos 3 meses):**
   - ODS 3 (Sa√∫de): Focar na taxa de mortalidade infantil j√° parcialmente implementada, adicionar mais indicadores de sa√∫de p√∫blica.
   - ODS 13 (A√ß√£o Clim√°tica): Urgente devido √†s mudan√ßas clim√°ticas impactando Sergipe.

2. **Fase 2 (6-9 meses):**
   - ODS 2 (Fome Zero): Expandir cobertura sobre seguran√ßa alimentar.
   - ODS 9 (Ind√∫stria e Infraestrutura): Monitorar desenvolvimento industrial sustent√°vel.
   - ODS 10 (Redu√ß√£o de Desigualdades): Complementar dados do ODS 1 e ODS 5.

3. **Fase 3 (10-15 meses):**
   - Demais ODS, priorizando conforme relev√¢ncia regional.

## 3.2 Integra√ß√µes com Fontes de Dados

1. **APIs Recomendadas:**
   - IBGE (PNAD, SIDRA): Dados socioecon√¥micos
   - DATASUS: Indicadores de sa√∫de
   - INEP: Dados educacionais
   - INPE: Dados clim√°ticos e de desmatamento

2. **Estrat√©gia de Coleta:**
   - Criar adapters para padronizar a estrutura de dados de diferentes fontes
   - Implementar ETL automatizado para atualiza√ß√£o peri√≥dica
   - Documentar metadados e transforma√ß√µes aplicadas

## 3.3 Recursos Necess√°rios para Implementa√ß√£o

1. **Equipe:**
   - 1 Desenvolvedor Frontend (React/Vue)
   - 1 Especialista em Visualiza√ß√£o de Dados
   - 1 Especialista em ODS e Coleta de Dados
   - 1 Designer UI/UX

2. **Infraestrutura:**
   - Servidor para API e armazenamento de dados
   - CDN para distribui√ß√£o otimizada de conte√∫do est√°tico
   - Automa√ß√£o para integra√ß√£o cont√≠nua e deployment

3. **Tempo Estimado:**
   - Implementa√ß√£o das melhorias t√©cnicas: 2-3 meses
   - Expans√£o gradual dos ODS: 15 meses
   - Testes e ajustes: Cont√≠nuo durante o desenvolvimento

üîπ SE√á√ÉO 4 - IMPACTO SOCIAL E ALCANCE
-------------------------------------------

## 4.1 Estrat√©gia de Divulga√ß√£o

1. **Engajamento com Stakeholders:**
   - Webinars para apresentar novos recursos e dashboards
   - Workshops com gestores p√∫blicos para interpreta√ß√£o dos dados
   - Boletins trimestrais com an√°lises e tend√™ncias

2. **Parcerias Estrat√©gicas:**
   - Universidades: Valida√ß√£o cient√≠fica dos dados e metodologias
   - √ìrg√£os p√∫blicos: Integra√ß√£o com sistemas existentes de monitoramento
   - ONGs: Amplifica√ß√£o do alcance e advocacy

## 4.2 M√©tricas de Impacto

1. **KPIs de Utiliza√ß√£o:**
   - N√∫mero de acessos mensais
   - Tempo m√©dio de sess√£o
   - Taxa de retorno de usu√°rios

2. **KPIs de Impacto:**
   - N√∫mero de cita√ß√µes em pol√≠ticas p√∫blicas
   - Men√ß√µes em documentos oficiais e imprensa
   - Estudos de caso documentados sobre uso dos dados para tomada de decis√£o

üîπ SE√á√ÉO 5 - PR√ìXIMOS PASSOS IMEDIATOS
-------------------------------------------

1. **A√ß√µes para pr√≥ximos 30 dias:**
   - Implementar o JSON centralizado para configura√ß√£o de ODS
   - Desenvolver prot√≥tipo da visualiza√ß√£o geogr√°fica
   - Criar estrutura de dados para ODS 3 (Sa√∫de)

2. **A√ß√µes para pr√≥ximos 90 dias:**
   - Implementar sistema de an√°lise de tend√™ncias
   - Desenvolver Web Components para padronizar interface
   - Lan√ßar primeira vers√£o expandida com ODS 3 completo

3. **Documenta√ß√£o e Governan√ßa:**
   - Atualizar documenta√ß√£o t√©cnica com novos padr√µes
   - Estabelecer processo de contribui√ß√£o para parceiros externos
   - Criar pol√≠tica de qualidade de dados e valida√ß√£o

===========================================
üìå FIM DA PROPOSTA
===========================================