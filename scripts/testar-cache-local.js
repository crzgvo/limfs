/**
 * Script para valida√ß√£o do sistema de cache local com TTL (Time To Live)
 * Verifica se o armazenamento e a expira√ß√£o dos dados do cache funcionam corretamente
 * 
 * Parte da valida√ß√£o t√©cnica do Dashboard Comparativo Din√¢mico (ODS)
 */

(async () => {
  try {
    // Fun√ß√£o para armazenar dados no cache com TTL (simplificada)
    function armazenarCache(chave, dados, minutos) {
      try {
        const item = {
          dados: dados,
          expira: Date.now() + (minutos * 60 * 1000)
        };
        localStorage.setItem(chave, JSON.stringify(item));
        return true;
      } catch (erro) {
        console.error('Erro ao armazenar no cache:', erro);
        return false;
      }
    }

    // Fun√ß√£o para obter dados do cache com verifica√ß√£o de expira√ß√£o
    function obterCache(chave) {
      try {
        const item = JSON.parse(localStorage.getItem(chave));
        if (!item) {
          return null;
        }
        
        if (Date.now() > item.expira) {
          localStorage.removeItem(chave);
          return null;
        }
        
        return item.dados;
      } catch (erro) {
        console.error('Erro ao obter cache:', erro);
        return null;
      }
    }

    // Verifica se as fun√ß√µes de cache existem globalmente
    if (typeof armazenarCache !== 'function' || typeof obterCache !== 'function') {
      console.error('‚ùå Fun√ß√µes de cache n√£o encontradas no escopo global.');
      console.log('üîç Verifique se as fun√ß√µes "armazenarCache" e "obterCache" est√£o definidas e acess√≠veis.');
      return;
    }

    console.log('üß™ Iniciando testes do sistema de cache local com TTL...');
    
    // Teste 1: Armazenamento e recupera√ß√£o imediata
    console.log('\nüìã Teste 1: Armazenamento e recupera√ß√£o imediata');
    const dadosTeste = { 
      timestamp: Date.now(),
      valorTeste: 'Teste de cache',
      array: [1, 2, 3],
      objeto: { nome: 'Painel ODS', versao: '1.0' }
    };
    
    console.log('üîÑ Armazenando dados no cache com TTL de 1 minuto...');
    armazenarCache('teste-cache-1min', dadosTeste, 1);
    
    const dadosRecuperados = obterCache('teste-cache-1min');
    if (dadosRecuperados) {
      console.log('‚úÖ Dados recuperados com sucesso!');
      console.log('üì¶ Dados armazenados:', JSON.stringify(dadosTeste));
      console.log('üì¶ Dados recuperados:', JSON.stringify(dadosRecuperados));
      
      // Verifica se os dados foram recuperados corretamente
      const dadosIguais = JSON.stringify(dadosTeste) === JSON.stringify(dadosRecuperados);
      if (dadosIguais) {
        console.log('‚úÖ Dados recuperados s√£o id√™nticos aos dados armazenados.');
      } else {
        console.error('‚ùå Dados recuperados s√£o diferentes dos dados armazenados!');
      }
    } else {
      console.error('‚ùå Falha ao recuperar dados do cache!');
    }
    
    // Teste 2: Verifica√ß√£o de expira√ß√£o do TTL
    console.log('\nüìã Teste 2: Verifica√ß√£o de expira√ß√£o do TTL');
    console.log('üîÑ Armazenando dados no cache com TTL de 5 segundos para teste r√°pido...');
    
    const dadosTesteRapido = { mensagem: 'Este dado deve expirar em 5 segundos' };
    armazenarCache('teste-cache-5seg', dadosTesteRapido, 5/60); // 5 segundos em minutos
    
    console.log('‚úÖ Dados armazenados. Verificando recupera√ß√£o imediata...');
    const dadosImediatos = obterCache('teste-cache-5seg');
    
    if (dadosImediatos) {
      console.log('‚úÖ Dados recuperados imediatamente:', dadosImediatos);
      
      console.log('‚è±Ô∏è Aguardando 6 segundos para verificar a expira√ß√£o...');
      console.log('‚è≥ Iniciando espera em', new Date().toLocaleTimeString());
      
      // Configurando um temporizador para verificar ap√≥s a expira√ß√£o
      setTimeout(() => {
        console.log('‚è≥ Tempo de espera conclu√≠do em', new Date().toLocaleTimeString());
        const dadosExpirados = obterCache('teste-cache-5seg');
        
        if (dadosExpirados === null) {
          console.log('‚úÖ Teste de expira√ß√£o bem-sucedido! Dados foram removidos corretamente ap√≥s TTL.');
        } else {
          console.error('‚ùå Falha no teste de expira√ß√£o! Dados ainda est√£o no cache ap√≥s o TTL:', dadosExpirados);
        }
        
        // Teste 3: Sobrescrever valor em cache existente
        console.log('\nüìã Teste 3: Sobrescrever valor em cache existente');
        const dadosAtualizados = { mensagem: 'Dados atualizados', timestamp: Date.now() };
        console.log('üîÑ Armazenando novo valor para chave j√° existente...');
        armazenarCache('teste-cache-1min', dadosAtualizados, 10);
        
        const dadosNovos = obterCache('teste-cache-1min');
        if (dadosNovos && dadosNovos.mensagem === 'Dados atualizados') {
          console.log('‚úÖ Dados sobrescritos com sucesso:', dadosNovos);
        } else {
          console.error('‚ùå Falha ao sobrescrever dados no cache!');
        }
        
        console.log('\nüìã RESUMO DOS TESTES:');
        console.log('‚úÖ Teste 1: Armazenamento e recupera√ß√£o imediata');
        console.log(`${dadosIguais ? '‚úÖ' : '‚ùå'} Teste de integridade dos dados`);
        console.log(`${dadosExpirados === null ? '‚úÖ' : '‚ùå'} Teste 2: Verifica√ß√£o de expira√ß√£o do TTL`);
        console.log(`${dadosNovos && dadosNovos.mensagem === 'Dados atualizados' ? '‚úÖ' : '‚ùå'} Teste 3: Sobrescrever valor em cache existente`);
        
        console.log('\n‚úÖ Valida√ß√£o do sistema de cache local conclu√≠da!');
      }, 6000); // 6 segundos (1 segundo adicional para garantir)
      
    } else {
      console.error('‚ùå Falha ao recuperar dados do cache imediatamente ap√≥s armazenamento!');
    }
  } catch (erro) {
    console.error('‚ùå Erro durante a valida√ß√£o do cache:', erro);
    console.error('üìù Detalhes do erro:', erro.stack);
  }
})();
