/**
 * Script para valida√ß√£o da Content Security Policy (CSP) do Dashboard Comparativo Din√¢mico (ODS)
 * Verifica se a CSP est√° implementada e se h√° viola√ß√µes
 */

(function() {
  console.log('üß™ Iniciando valida√ß√£o de Content Security Policy (CSP)...');
  
  // Fun√ß√£o para obter as pol√≠ticas de CSP da p√°gina
  function obterPoliticasCSP() {
    const metaCSP = document.querySelector('meta[http-equiv="Content-Security-Policy"]');
    const headersCSP = {};
    
    // Tenta obter CSP dos cabe√ßalhos HTTP (simulado)
    // Em um ambiente real, isso seria obtido atrav√©s de uma requisi√ß√£o de rede
    try {
      // Esta parte √© apenas uma simula√ß√£o, pois n√£o temos acesso direto aos cabe√ßalhos HTTP no cliente
      console.log('Nota: Verifica√ß√£o de cabe√ßalhos HTTP requer acesso ao servidor.');
    } catch (erro) {
      console.warn('‚ö†Ô∏è N√£o foi poss√≠vel verificar cabe√ßalhos HTTP:', erro.message);
    }
    
    return {
      meta: metaCSP ? metaCSP.getAttribute('content') : null,
      headers: headersCSP
    };
  }
  
  // Fun√ß√£o para analisar e validar as pol√≠ticas de CSP
  function analisarPoliticasCSP(politicas) {
    const resultado = {
      implementada: false,
      diretivas: {},
      violacoes: [],
      recomendacoes: []
    };
    
    // Verifica se existe CSP implementada
    if (!politicas.meta && Object.keys(politicas.headers).length === 0) {
      resultado.implementada = false;
      resultado.violacoes.push('CSP n√£o implementada na p√°gina');
      resultado.recomendacoes.push('Implemente uma pol√≠tica de CSP usando a meta tag ou cabe√ßalhos HTTP');
      return resultado;
    }
    
    resultado.implementada = true;
    
    // Analisa a pol√≠tica da meta tag se dispon√≠vel
    if (politicas.meta) {
      console.log('‚úÖ CSP implementada via meta tag');
      console.log('üìã Pol√≠tica CSP:', politicas.meta);
      
      // Parseia as diretivas da pol√≠tica
      const diretivasRaw = politicas.meta.split(';').map(d => d.trim());
      diretivasRaw.forEach(diretiva => {
        if (diretiva) {
          const [nome, ...valores] = diretiva.split(' ');
          resultado.diretivas[nome] = valores.join(' ');
        }
      });
    }
    
    // Verifica diretivas cr√≠ticas
    const diretivasRecomendadas = [
      'default-src',
      'script-src',
      'style-src',
      'img-src',
      'connect-src'
    ];
    
    diretivasRecomendadas.forEach(diretiva => {
      if (!resultado.diretivas[diretiva]) {
        resultado.recomendacoes.push(`Adicione a diretiva '${diretiva}' √† sua pol√≠tica CSP`);
      }
    });
    
    // Verifica o uso de 'unsafe-inline' e 'unsafe-eval'
    const diretivasCriticas = ['script-src', 'style-src'];
    diretivasCriticas.forEach(diretiva => {
      if (resultado.diretivas[diretiva]) {
        if (resultado.diretivas[diretiva].includes('unsafe-inline')) {
          resultado.violacoes.push(`A diretiva '${diretiva}' permite 'unsafe-inline', o que pode representar um risco de seguran√ßa`);
        }
        if (resultado.diretivas[diretiva].includes('unsafe-eval')) {
          resultado.violacoes.push(`A diretiva '${diretiva}' permite 'unsafe-eval', o que pode representar um risco de seguran√ßa`);
        }
      }
    });
    
    return resultado;
  }
  
  // Verifica se h√° viola√ß√µes de CSP reportadas no console
  function verificarViolacoesConsole() {
    console.log('‚ö†Ô∏è Verifica√ß√£o de viola√ß√µes CSP no console deve ser feita manualmente.');
    console.log('üìù Instru√ß√£o: Ap√≥s carregar a p√°gina, verifique no console do navegador se h√° mensagens de erro relacionadas √† CSP.');
    
    return {
      mensagem: 'Verifica√ß√£o manual de viola√ß√µes CSP no console √© necess√°ria'
    };
  }
  
  // Verifica se h√° suporte ao monitoramento de viola√ß√µes de CSP
  function verificarMonitoramentoCSP() {
    let temReportTo = false;
    let temReportURI = false;
    
    const politicasCSP = obterPoliticasCSP();
    
    if (politicasCSP.meta) {
      temReportTo = politicasCSP.meta.includes('report-to');
      temReportURI = politicasCSP.meta.includes('report-uri');
    }
    
    if (temReportTo || temReportURI) {
      console.log('‚úÖ Monitoramento de viola√ß√µes CSP implementado');
    } else {
      console.log('‚ö†Ô∏è Monitoramento de viola√ß√µes CSP n√£o implementado');
      console.log('üìù Recomenda√ß√£o: Adicione "report-to" ou "report-uri" √† sua pol√≠tica CSP para monitorar viola√ß√µes');
    }
    
    return {
      implementado: temReportTo || temReportURI,
      mensagem: temReportTo || temReportURI ? 
        'Monitoramento de viola√ß√µes CSP implementado' : 
        'Monitoramento de viola√ß√µes CSP n√£o implementado'
    };
  }
  
  // Executa as verifica√ß√µes
  const politicas = obterPoliticasCSP();
  const analiseCSP = analisarPoliticasCSP(politicas);
  const violacoesConsole = verificarViolacoesConsole();
  const monitoramentoCSP = verificarMonitoramentoCSP();
  
  // Exibe resumo das verifica√ß√µes
  console.log('\nüìã RESUMO DA VALIDA√á√ÉO DE CSP:');
  console.log(`CSP implementada: ${analiseCSP.implementada ? '‚úÖ Sim' : '‚ùå N√£o'}`);
  
  if (analiseCSP.implementada) {
    console.log('\nDiretivas encontradas:');
    Object.keys(analiseCSP.diretivas).forEach(diretiva => {
      console.log(`- ${diretiva}: ${analiseCSP.diretivas[diretiva]}`);
    });
  }
  
  if (analiseCSP.violacoes.length > 0) {
    console.log('\n‚ö†Ô∏è VIOLA√á√ïES ENCONTRADAS:');
    analiseCSP.violacoes.forEach(violacao => {
      console.log(`- ${violacao}`);
    });
  } else if (analiseCSP.implementada) {
    console.log('\n‚úÖ Nenhuma viola√ß√£o cr√≠tica de CSP encontrada!');
  }
  
  if (analiseCSP.recomendacoes.length > 0) {
    console.log('\nüìù RECOMENDA√á√ïES:');
    analiseCSP.recomendacoes.forEach(recomendacao => {
      console.log(`- ${recomendacao}`);
    });
  }
  
  console.log('\n‚úÖ Valida√ß√£o de CSP conclu√≠da!');
})();